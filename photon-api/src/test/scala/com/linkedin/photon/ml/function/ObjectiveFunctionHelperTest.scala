/*
 * Copyright 2017 LinkedIn Corp. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may obtain a
 * copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
package com.linkedin.photon.ml.function

import org.mockito.Mockito._
import org.testng.Assert._
import org.testng.annotations.{DataProvider, Test}

import com.linkedin.photon.ml.TaskType
import com.linkedin.photon.ml.optimization.game.{CoordinateOptimizationConfiguration, RandomEffectOptimizationConfiguration}
import com.linkedin.photon.ml.optimization.game.FixedEffectOptimizationConfiguration

/**
 * Unit tests for [[ObjectiveFunctionHelper]].
 */
class ObjectiveFunctionHelperTest {

  import ObjectiveFunctionHelperTest._

  @DataProvider
  def trainingTaskProvider(): Array[Array[Any]] =
    Array(
      Array(FIXED_COORDINATE_OPT_CONFIG),
      Array(RANDOM_COORDINATE_OPT_CONFIG))

  /**
   * Test that the [[ObjectiveFunction]] generated by the factory function returned by the [[ObjectiveFunctionHelper]]
   * is of the appropriate type for the given coordinate configuration.
   *
   * @param config The coordinate configuration
   */
  @Test(dataProvider = "trainingTaskProvider")
  def testBuildFactory(config: CoordinateOptimizationConfiguration): Unit = {

    val objectiveFunctionFactory =
      ObjectiveFunctionHelper.buildFactory(TaskType.LOGISTIC_REGRESSION, TREE_AGGREGATE_DEPTH)(config)

    config match {
      case _: FixedEffectOptimizationConfiguration =>
        assertTrue(objectiveFunctionFactory.isInstanceOf[ObjectiveFunctionHelper.DistributedObjectiveFunctionFactory])

      case _: RandomEffectOptimizationConfiguration =>
        assertTrue(objectiveFunctionFactory.isInstanceOf[ObjectiveFunctionHelper.SingleNodeObjectiveFunctionFactory])
    }
  }
}

object ObjectiveFunctionHelperTest {

  private val FIXED_COORDINATE_OPT_CONFIG = mock(classOf[FixedEffectOptimizationConfiguration])
  private val RANDOM_COORDINATE_OPT_CONFIG = mock(classOf[RandomEffectOptimizationConfiguration])
  private val TREE_AGGREGATE_DEPTH = 3
}
