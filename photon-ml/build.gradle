apply plugin: 'scala'

apply from: file('../build-scripts/integration-test.gradle')

compileScala {
  scalaCompileOptions.fork = true
  scalaCompileOptions.additionalParameters = [
    "-feature",
    "-language:reflectiveCalls", // used for config structural typing
    "-language:postfixOps"
  ]
}

dependencies {
  compile("org.scala-lang:scala-compiler:${scalaVersion}")
  compile("org.scala-lang:scala-library:${scalaVersion}")
  compile("org.scala-lang:scala-reflect:${scalaVersion}")

  compile('org.apache.avro:avro:1.7.5')
  compile('org.apache.avro:avro-compiler:1.7.5')
  compile('org.apache.avro:avro-mapred:1.7.5')
  compile('com.xeiam.xchart:xchart:2.5.1')
  compile('org.apache.xmlgraphics:batik-svggen:1.7')

  compile("org.apache.spark:spark-core_${baseScalaVersion}:1.4.0")
  compile("org.apache.spark:spark-mllib_${baseScalaVersion}:1.4.0")
  compile("org.apache.spark:spark-sql_${baseScalaVersion}:1.4.0")
  compile("org.apache.spark:spark-catalyst_${baseScalaVersion}:1.4.0")

  //this one is scala's option parsing library
  compile("com.github.scopt:scopt_${baseScalaVersion}:3.2.0")

  compile('log4j:log4j:1.2.17')

  compile('com.linkedin.photon-schemas:photon-schemas:0.0.2')


  // TODO cross build
  testCompile(project(":photon-test"))

  testRuntime("org.scalanlp:breeze_${baseScalaVersion}:0.11.2")
  testRuntime("org.scalanlp:breeze-macros_${baseScalaVersion}:0.11.2")
}
