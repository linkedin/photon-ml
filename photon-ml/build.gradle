apply plugin: 'li-scala'
apply plugin: 'li-integ-test'

compileScala {
  scalaCompileOptions.fork = true
  scalaCompileOptions.additionalParameters = [
    "-feature",
    "-language:reflectiveCalls", // used for config structural typing
    "-language:postfixOps"
  ]
}

dependencies {
  compile(spec.external."scalaCompiler$scalaSuffix")
  compile(spec.external."scalaLibrary$scalaSuffix")
  compile(spec.external."scalaReflect$scalaSuffix")
  compile(spec.external.avro)
  compile(spec.external.avroCompiler)
  compile(spec.external.avroMapred)
  compile(spec.external.xchart)
  compile(spec.external.batik)

  compile(spec.external."spark-core$scalaSuffix")
  compile(spec.external."spark-mllib$scalaSuffix")
  compile(spec.external."spark-sql$scalaSuffix")
  compile(spec.external."spark-catalyst$scalaSuffix")

  //this one is scala's option parsing library
  compile(spec.external."scopt$scalaSuffix")

  compile(spec.external."log4j")

  compile(spec.product."photon-schemas"."photon-schemas")


  testCompile(project(":mlease-test$scalaSuffix"))
  testRuntime(spec.external."breeze-core$scalaSuffix")
  testRuntime(spec.external."breeze-macro$scalaSuffix")
}
