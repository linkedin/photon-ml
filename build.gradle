apply plugin: 'li-product'
apply plugin: 'li-jacoco-product'
apply plugin: 'li-findbugs-product'
apply plugin: 'li-checkstyle-product'

subprojects {
  configurations.all {
    // Brought in by azkaban2, but not needed
    exclude group: 'commons-dbutils'
    exclude group: 'commons-fileupload'
    exclude group: 'commons-pool'
    exclude group: 'com.h2database'
    exclude group: 'mysql'
    exclude group: 'com.google.collections', module: 'google-collections'
    exclude group: 'kafka', module: 'kafka'
  }

  plugins.withType(JavaPlugin) {
    test {
      useTestNG()

      options {
        parallel = 'methods'
        threadCount = 4
      }

      afterSuite { desc, result ->
        if (!desc.parent) {
          println ":${project.name} -- Executed ${result.testCount} tests: ${result.successfulTestCount} succeeded, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped"
        }
      }
      // Forward standard out from child JVMs to the console
      testLogging.showStandardStreams = true;
      systemProperty "log4j.configuration", "file:${project.rootDir}/log4j.properties"
    }

    dependencies {
      testCompile spec.external."testng"
    }

    // TODO: Currently spark-shell on Nertz runs on Java 1.7, so 1.8 build doesn't run correctly on spark-shell.
    // TODO: Ticket about Java version of Spark on Nertz:
    // TODO: https://jira01.corp.linkedin.com:8443/browse/HADOOP-6994
    // TODO: Should update to 1.8 after Spark on Java 1.8 is available.
    sourceCompatibility = 1.7
  }

  tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = ["-feature", "-deprecation", "-verbose", "-optimize", "-explaintypes", "-g:vars"]

    scalaCompileOptions.useAnt = false

    configure(scalaCompileOptions.forkOptions) {
      memoryMaximumSize = '1g'
    }
    configurations.zinc.transitive = true
  }
}

allprojects {
  tasks.withType(JacocoReport) {
    afterEvaluate {
      reports.html.enabled = true
      reports.xml.enabled = true
      reports.csv.enabled = true
    }
  }
}
