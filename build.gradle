// The shadow plugin has a jar conflict with a zip library also present in ligradle, but we can
// work around the problem by adding the buildscript dependency to the top-level build.gradle.
buildscript {
  dependencies {
    classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.2'
  }
}

apply plugin: 'li-product'
apply plugin: 'li-jacoco-product'
apply plugin: 'li-findbugs-product'
apply plugin: 'li-checkstyle-product'

buildscript {
  dependencies {
    classpath spec.external.scalaStyle
  }
}

subprojects {
  configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
     if ((details.requested.group == 'com.github.fommil.netlib') && (details.requested.name == 'core') && (details.requested.version == '1.1.2')) {
      details.useTarget group: 'com.github.fommil.netlib', name: 'core', version: '1.1.2-LI1'
     }
   }
  }

  plugins.withType(JavaPlugin) {
    test {
      useTestNG()

      options {
        parallel = 'methods'
        threadCount = 4
      }

      afterSuite { desc, result ->
        if (!desc.parent) {
          println ":${project.name} -- Executed ${result.testCount} tests: ${result.successfulTestCount} succeeded, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped"
        }
      }

      // Forward standard out from child JVMs to the console
      systemProperty "log4j.configuration", "file:${project.rootDir}/log4j.properties"

      minHeapSize = "2G"
      maxHeapSize = "8G"
    }

    dependencies {
      testCompile spec.external."testng"
    }

    sourceCompatibility = 1.8
  }

  tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = ["-feature", "-deprecation", "-verbose", "-optimize", "-unchecked", "-Yinline-warnings", "-g:vars"]
    scalaCompileOptions.useAnt = false

    configure(scalaCompileOptions.forkOptions) {
      memoryMaximumSize = '1g'
    }
    configurations.zinc.transitive = true
  }

  apply plugin: 'scalaStyle'

  // scalaStyle config. This evals after ScalaPlugin so that it will have access to sourceSets
  plugins.withType(ScalaPlugin) {
    afterEvaluate {
      scalaStyle {
        configLocation = 'scalastyle-config.xml'
        includeTestSourceDirectory = false
        source = sourceSets.main.scala
      }
    }
  }
}

allprojects {
  tasks.withType(JacocoReport) {
    afterEvaluate {
      reports.html.enabled = true
      reports.xml.enabled = true
      reports.csv.enabled = true
    }
  }
}
