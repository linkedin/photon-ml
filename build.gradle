/*
 * Copyright 2017 LinkedIn Corp. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may obtain a
 * copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
// TODO: codecoverage plugin
// TODO: checkstyle plugin

buildscript {
  repositories {
    jcenter()
    maven {
      // For avro compiler plugin gradle-avro-plugin
      url 'https://plugins.gradle.org/m2/'
    }
  }

  dependencies {
    classpath 'com.commercehub.gradle.plugin:gradle-avro-plugin:0.7.0'
    classpath 'org.github.ngbinh.scalastyle:gradle-scalastyle-plugin_2.10:0.8.2'
    classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    classpath 'org.jetbrains.dokka:dokka-gradle-plugin:0.9.16'

    // shadow allows us to build fat/shadow jars. See doc at: http://imperceptiblethoughts.com/shadow/.
    classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
  }
}

// For LinkedIn internal builds, apply the LinkedIn-specific build file
if (project.hasProperty('overrideBuildEnvironment')) {
  apply from: project.overrideBuildEnvironment
} else {
  apply from: "defaultEnvironment.gradle"
}

allprojects {
  apply plugin: 'eclipse'
  apply plugin: 'idea'

  repositories {
    jcenter()
    maven {
      // For avro compiler plugin gradle-avro-plugin
      url 'https://plugins.gradle.org/m2/'
    }
  }
}

apply from: 'build-scripts/rat.gradle'

// The gradle variables defined here are visible in sub-projects
ext {
  sparkVersion = '2.3.0'
}

rat {
  excludes = [
    '*.patch',
    '**/*.avsc',
    '**/*.acl',
    '**/*.iml',
    '**/*.ipr',
    '**/*.iws',
    '**/*.json',
    '**/*.avro',
    '**/README.md',
    '**/.classpath',
    '**/.cache/**',
    '**/.git/**',
    '**/.gitignore',
    '**/.gradle/**',
    '**/.idea/**',
    '**/.project',
    '**/.settings/**',
    '**/.DS_Store/**',
    '**/build/**',
    '.reviewboardrc',
    '.travis.yml',
    'out/**',
    'derby.log', // from running spark-shell in photon-ml dir
    'metastore_db/**', // from running spark-shell in photon-m dir
    'dev-scripts/license_template.txt',
    'gradle/wrapper/**',
    'gradlew',
    'gradlew.bat',
    '**/README.md',
    'LICENSE',
    'NOTICE',
    'derby.log',
    'metastore_db/**',
    'gradle.properties',
    'local.properties',
    '**/gradle.properties',
    'log4j.properties',
    'photon-api/src/integTest/resources/**',
    'photon-api/src/test/resources/**',
    'photon-avro-schemas/src/main/java/**',
    'photon-client/src/integTest/resources/**',
    'Photon Style.xml',
    'travis/**'
  ]
}

subprojects {
  // Put the build dir into the rootProject
  buildDir = "../build/$name"

  plugins.withType(JavaPlugin) {
    tasks.withType(Test) {
      useTestNG()

      // Exclude tests (ex. gradle test -Pexclude=SomeTestClass)
      def excludedTests = project.properties['exclude']
      if (excludedTests) {
        excludedTests.replaceAll('\\s', '').split('[,]').each {
          exclude "**/${it}.class"
        }
      }

      options {
        parallel = 'methods'
        threadCount = 4
        listeners << 'com.linkedin.photon.ml.test.FailOnSkipListener'
      }

      afterSuite { desc, result ->
        if (!desc.parent) {
          println ":${project.name} -- Executed ${result.testCount} tests: ${result.successfulTestCount} succeeded, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped"
        }
      }

      // Forward standard out from child JVMs to the console
      testLogging {
        showStackTraces = true
        showStandardStreams = true
        showExceptions = true
        showCauses = true
        displayGranularity = maxGranularity
        exceptionFormat = 'full'
      }

      outputs.upToDateWhen { false }

      systemProperty "log4j.configuration", "file:${project.rootDir}/log4j.properties"

      minHeapSize = "2G"
      maxHeapSize = "8G"
    }

    dependencies {
      testCompile 'org.testng:testng:6.9.9'
    }

    sourceCompatibility = 1.8
  }

  tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = ["-feature", "-deprecation", "-verbose", "-optimize", "-unchecked", "-Yinline-warnings", "-g:vars"]

    configure(scalaCompileOptions.forkOptions) {
      memoryMaximumSize = '1g'
    }
    configurations.zinc.transitive = true
  }

  apply plugin: 'scalaStyle'

  // scalaStyle config. This evals after ScalaPlugin so that it will have access to sourceSets
  plugins.withType(ScalaPlugin) {
    afterEvaluate {
      scalaStyle {
        configLocation = 'scalastyle-config.xml'
        includeTestSourceDirectory = false
        source = sourceSets.main.scala
      }
    }
  }

  idea {
    module {
      testSourceDirs += file('src/integTest/scala')
      testSourceDirs += file('src/test/scala')
    }
  }

  // This task allows to get the dependencies from all the sub-project from the main photon-ml directory
  // (otherwise, you have to change to each sub-project directory to get its dependencies)
  task allDeps(type: DependencyReportTask) {}
}

// Task to generate the Gradle wrapper scripts
task wrapper(type: Wrapper) {
  gradleVersion = '4.0'
}
