// TODO: codecoverage plugin apply plugin: 'li-jacoco-product'
// TODO: checkstyle plugin apply plugin: 'li-checkstyle-product'

buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }

  // TODO: is this the right way to incluse gradle plugins?
  repositories {
    repositories {
      // For license plugin.
      maven {
        url 'http://dl.bintray.com/content/netflixoss/external-gradle-plugins/'
      }
    }
  }

}

allprojects {
  apply plugin: 'idea'
  repositories {
    mavenCentral()

    // TODO: Linkedin internal repo, should be cleaned out
    ['SNA', 'DDS', 'ext-restricted'].each { repositoryName ->
      ivy {
        url "http://artifactory.corp.linkedin.com:8081/artifactory/${repositoryName}"

        layout 'pattern', {
          m2compatible = true

          artifact '[organisation]/[module]/[revision]/[module]-[revision](.[ext])'
          ivy '[organisation]/[module]/[revision]/[module]-[revision].ivy'
        }
      }
    }
  }
}

apply from: file('scala.gradle')

subprojects {
  // Put the build dir into the rootProject
  buildDir = "../build/$name"

  configurations.all {
    // Brought in by azkaban2, but not needed
    exclude group: 'commons-dbutils'
    exclude group: 'commons-fileupload'
    exclude group: 'commons-pool'
    exclude group: 'com.h2database'
    exclude group: 'mysql'
    exclude group: 'com.google.collections', module: 'google-collections'
    exclude group: 'kafka', module: 'kafka'
  }

  plugins.withType(JavaPlugin) {
    test {
      useTestNG()

      options {
        parallel = 'methods'
        threadCount = 4
      }

      afterSuite { desc, result ->
        if (!desc.parent) {
          println ":${project.name} -- Executed ${result.testCount} tests: ${result.successfulTestCount} succeeded, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped"
        }
      }
      // Forward standard out from child JVMs to the console
      testLogging {
        showStackTraces = true
        showStandardStreams = true
        showExceptions = true
        showCauses = true
        displayGranularity = maxGranularity
        exceptionFormat = 'full'
      }

      systemProperty "log4j.configuration", "file:${project.rootDir}/log4j.properties"
    }

    dependencies {
      testCompile 'org.testng:testng:6.9.9'
    }

    // TODO: Currently spark-shell on Nertz runs on Java 1.7, so 1.8 build doesn't run correctly on spark-shell.
    // TODO: Ticket about Java version of Spark on Nertz:
    // TODO: https://jira01.corp.linkedin.com:8443/browse/HADOOP-6994
    // TODO: Should update to 1.8 after Spark on Java 1.8 is available.
    sourceCompatibility = 1.7
  }

  tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = ["-feature", "-deprecation", "-verbose", "-optimize", "-explaintypes", "-g:vars"]

    scalaCompileOptions.useAnt = false

    configure(scalaCompileOptions.forkOptions) {
      memoryMaximumSize = '1g'
    }
    configurations.zinc.transitive = true
  }
}